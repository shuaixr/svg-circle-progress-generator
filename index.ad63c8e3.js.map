{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["(function() {\n    const controls = document.getElementById(\"controls\");\n    const output = document.getElementById(\"output\");\n    const outputCode = document.getElementById(\"output-code\");\n    const copyBtn = document.getElementById(\"copy\");\n    const svgAttributes = {\n        circumference: \"565.48px\",\n        percentage: \"118.692px\",\n        progress: 79,\n        size: 200,\n        backgroundColor: \"#ffffff\",\n        backgroundOp: \"0\",\n        circleColor: \"#e0e0e0\",\n        progressColor: \"#76e5b1\",\n        circleWidth: \"16px\",\n        progressWidth: \"16px\",\n        progressShape: \"round\",\n        textColor: \"#6bdba7\",\n        textSize: {\n            width: 50,\n            height: 50,\n            fontSize: \"52\"\n        },\n        valueToggle: true,\n        percentageToggle: false\n    };\n    function addOpacityToHex(hexColor, opacity) {\n        // ?? hexColor ???? 6 ? HEX ??\n        if (!/^#?[0-9A-Fa-f]{6}$/.test(hexColor)) throw new Error(\"Invalid HEX color format\");\n        // ??????? # ??\n        hexColor = hexColor.replace(/^#/, \"\");\n        // ?? opacity ? 0 ? 1 ??\n        opacity = Math.max(0, Math.min(1, opacity));\n        // ? opacity ?????????\n        const alpha = Math.round(opacity * 255).toString(16).padStart(2, \"0\");\n        // ????????\n        return `#${hexColor}${alpha}`;\n    }\n    function getSvg(attributes) {\n        const { circumference, percentage, progress, size, circleColor, progressColor, circleWidth, progressWidth, progressShape, textColor, textSize, valueToggle, percentageToggle, backgroundColor, backgroundOp } = attributes;\n        const suffix = percentageToggle ? \"%\" : \"\";\n        const text = valueToggle ? `\\n    <text x=\"${Math.round(size / 2 - textSize.width / 1.75)}px\" y=\"${Math.round(size / 2 + textSize.height / 3.25)}px\" fill=\"${textColor}\" font-size=\"${textSize.fontSize}px\" font-weight=\"bold\" style=\"transform:rotate(90deg) translate(0px, -${size - 4}px)\">${progress}${suffix}</text>` : \"\";\n        return `\n  <svg width=\"${size}\" height=\"${size}\" viewBox=\"-${size * 0.125} -${size * 0.125} ${size * 1.25} ${size * 1.25}\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style=\"transform:rotate(-90deg); background-color: ${addOpacityToHex(backgroundColor, backgroundOp)}\">\n    <circle r=\"${size / 2 - 10}\" cx=\"${size / 2}\" cy=\"${size / 2}\" fill=\"transparent\" stroke=\"${circleColor}\" stroke-width=\"${circleWidth}\" stroke-dasharray=\"${circumference}\" stroke-dashoffset=\"0\"></circle>\n    <circle r=\"${size / 2 - 10}\" cx=\"${size / 2}\" cy=\"${size / 2}\" stroke=\"${progressColor}\" stroke-width=\"${progressWidth}\" stroke-linecap=\"${progressShape}\" stroke-dashoffset=\"${percentage}\" fill=\"transparent\" stroke-dasharray=\"${circumference}\"></circle>${text}\n  </svg>\n    `;\n    }\n    function setTextSize() {\n        if (svgAttributes.valueToggle) {\n            const svgText = document.querySelector(\"text\");\n            const textRect = svgText.getBoundingClientRect();\n            svgAttributes.textSize = {\n                width: Math.round(textRect.width),\n                height: Math.round(textRect.height),\n                fontSize: svgAttributes.textSize.fontSize\n            };\n        }\n    }\n    function handleFormChange(e) {\n        let value = e.target.value;\n        let rerender = false;\n        if (e.target.name === \"progress\") {\n            const radius = svgAttributes.size / 2 - 10;\n            const circumference = 3.14 * radius * 2;\n            svgAttributes.percentage = Math.round(circumference * ((100 - e.target.valueAsNumber) / 100)) + \"px\";\n            if (e.target.valueAsNumber === 0) svgAttributes.progressColor = svgAttributes.circleColor;\n            else if (e.target.valueAsNumber > 0 && svgAttributes.progressColor === svgAttributes.circleColor) svgAttributes.progressColor = controls.progressColor.value;\n            setTextSize();\n            rerender = true;\n        } else if (e.target.name === \"size\") {\n            const radius = e.target.valueAsNumber / 2 - 10;\n            const circumference = 3.14 * radius * 2;\n            svgAttributes.circumference = circumference + \"px\";\n            svgAttributes.percentage = Math.round(circumference * ((100 - svgAttributes.progress) / 100)) + \"px\";\n        } else if (e.target.type === \"checkbox\") {\n            value = e.target.checked;\n            if (e.target.name === \"percentageToggle\") setTextSize();\n            rerender = true;\n        } else if (e.target.name === \"textSize\") {\n            const svgText = document.querySelector(\"text\");\n            const textRect = svgText.getBoundingClientRect();\n            value = {\n                width: Math.round(textRect.width),\n                height: Math.round(textRect.height),\n                fontSize: value\n            };\n            rerender = true;\n        } else if (e.target.name === \"backgroundOp\" && e.target.name === \"backgroundColor\") rerender = true;\n        svgAttributes[e.target.name] = value;\n        setSvg(rerender);\n    }\n    function setSvg(rerender = false) {\n        const html = getSvg(svgAttributes);\n        output.innerHTML = html;\n        outputCode.innerText = html;\n        if (rerender) {\n            setTextSize();\n            setSvg(false);\n        }\n    }\n    function handleCopy(e) {\n        navigator.clipboard.writeText(outputCode.innerText);\n        const currentValue = e.target.innerText;\n        e.target.innerText = \"Copied!\";\n        setTimeout(function() {\n            e.target.innerText = currentValue;\n        }, 2000);\n    }\n    setSvg(false);\n    controls.addEventListener(\"input\", handleFormChange);\n    copyBtn.addEventListener(\"click\", handleCopy);\n    async function convertSVGsToPNGsAndZip(svgArray) {\n        const zip = new JSZip();\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 800;\n        canvas.height = 800;\n        const ctx = canvas.getContext(\"2d\");\n        async function svgToPng(svgString, index) {\n            return new Promise((resolve)=>{\n                const img = new Image();\n                img.onload = ()=>{\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\n                    const scale = Math.min(canvas.width / img.width, canvas.height / img.height);\n                    const x = canvas.width / 2 - img.width / 2 * scale;\n                    const y = canvas.height / 2 - img.height / 2 * scale;\n                    ctx.drawImage(img, x, y, img.width * scale, img.height * scale);\n                    canvas.toBlob((blob)=>{\n                        resolve({\n                            blob,\n                            index\n                        });\n                    }, \"image/png\");\n                };\n                img.src = \"data:image/svg+xml;base64,\" + btoa(svgString);\n            });\n        }\n        const pngPromises = svgArray.map((svg, index)=>svgToPng(svg, index));\n        const pngResults = await Promise.all(pngPromises);\n        pngResults.forEach(({ blob, index })=>{\n            zip.file(`progres_${index}.png`, blob);\n        });\n        const zipBlob = await zip.generateAsync({\n            type: \"blob\"\n        });\n        const downloadLink = document.createElement(\"a\");\n        downloadLink.href = URL.createObjectURL(zipBlob);\n        downloadLink.download = \"svg_to_png_images.zip\";\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n    }\n    function handleGetp() {\n        const sa = [];\n        for(let index = 0; index <= 100; index++){\n            progressrange.value = index;\n            const inputEvent = new Event(\"input\", {\n                bubbles: true,\n                cancelable: true\n            });\n            progressrange.dispatchEvent(inputEvent);\n            sa.push(output.innerHTML);\n        }\n        convertSVGsToPNGsAndZip(sa).then();\n    }\n    const getpBtn = document.getElementById(\"get-pngs\");\n    getpBtn.addEventListener(\"click\", handleGetp);\n})();\n\n//# sourceMappingURL=index.ad63c8e3.js.map\n","(function () {\n  const controls = document.getElementById(\"controls\");\n  const output = document.getElementById(\"output\");\n  const outputCode = document.getElementById(\"output-code\");\n  const copyBtn = document.getElementById(\"copy\");\n\n  const svgAttributes = {\n    circumference: \"565.48px\",\n    percentage: \"118.692px\",\n    progress: 79,\n    size: 200,\n    backgroundColor: \"#ffffff\",\n    backgroundOp: \"0\",\n    circleColor: \"#e0e0e0\",\n    progressColor: \"#76e5b1\",\n    circleWidth: \"16px\",\n    progressWidth: \"16px\",\n    progressShape: \"round\",\n    textColor: \"#6bdba7\",\n    textSize: {\n      width: 50,\n      height: 50,\n      fontSize: \"52\",\n    },\n    valueToggle: true,\n    percentageToggle: false,\n  };\n  function addOpacityToHex(hexColor, opacity) {\n    // ?? hexColor ???? 6 ? HEX ??\n    if (!/^#?[0-9A-Fa-f]{6}$/.test(hexColor)) {\n      throw new Error(\"Invalid HEX color format\");\n    }\n\n    // ??????? # ??\n    hexColor = hexColor.replace(/^#/, \"\");\n\n    // ?? opacity ? 0 ? 1 ??\n    opacity = Math.max(0, Math.min(1, opacity));\n\n    // ? opacity ?????????\n    const alpha = Math.round(opacity * 255)\n      .toString(16)\n      .padStart(2, \"0\");\n\n    // ????????\n    return `#${hexColor}${alpha}`;\n  }\n\n  function getSvg(attributes) {\n    const {\n      circumference,\n      percentage,\n      progress,\n      size,\n      circleColor,\n      progressColor,\n      circleWidth,\n      progressWidth,\n      progressShape,\n      textColor,\n      textSize,\n      valueToggle,\n      percentageToggle,\n      backgroundColor,\n      backgroundOp,\n    } = attributes;\n\n    const suffix = percentageToggle ? \"%\" : \"\";\n    const text = valueToggle\n      ? `\\n    <text x=\"${Math.round(\n          size / 2 - textSize.width / 1.75\n        )}px\" y=\"${Math.round(\n          size / 2 + textSize.height / 3.25\n        )}px\" fill=\"${textColor}\" font-size=\"${\n          textSize.fontSize\n        }px\" font-weight=\"bold\" style=\"transform:rotate(90deg) translate(0px, -${\n          size - 4\n        }px)\">${progress}${suffix}</text>`\n      : \"\";\n\n    return `\n  <svg width=\"${size}\" height=\"${size}\" viewBox=\"-${size * 0.125} -${\n      size * 0.125\n    } ${size * 1.25} ${\n      size * 1.25\n    }\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style=\"transform:rotate(-90deg); background-color: ${addOpacityToHex(\n      backgroundColor,\n      backgroundOp\n    )}\">\n    <circle r=\"${size / 2 - 10}\" cx=\"${size / 2}\" cy=\"${\n      size / 2\n    }\" fill=\"transparent\" stroke=\"${circleColor}\" stroke-width=\"${circleWidth}\" stroke-dasharray=\"${circumference}\" stroke-dashoffset=\"0\"></circle>\n    <circle r=\"${size / 2 - 10}\" cx=\"${size / 2}\" cy=\"${\n      size / 2\n    }\" stroke=\"${progressColor}\" stroke-width=\"${progressWidth}\" stroke-linecap=\"${progressShape}\" stroke-dashoffset=\"${percentage}\" fill=\"transparent\" stroke-dasharray=\"${circumference}\"></circle>${text}\n  </svg>\n    `;\n  }\n\n  function setTextSize() {\n    if (svgAttributes.valueToggle) {\n      const svgText = document.querySelector(\"text\");\n      const textRect = svgText.getBoundingClientRect();\n      svgAttributes.textSize = {\n        width: Math.round(textRect.width),\n        height: Math.round(textRect.height),\n        fontSize: svgAttributes.textSize.fontSize,\n      };\n    }\n  }\n\n  function handleFormChange(e) {\n    let value = e.target.value;\n    let rerender = false;\n    if (e.target.name === \"progress\") {\n      const radius = svgAttributes.size / 2 - 10;\n      const circumference = 3.14 * radius * 2;\n      svgAttributes.percentage =\n        Math.round(circumference * ((100 - e.target.valueAsNumber) / 100)) +\n        \"px\";\n      if (e.target.valueAsNumber === 0) {\n        svgAttributes.progressColor = svgAttributes.circleColor;\n      } else if (\n        e.target.valueAsNumber > 0 &&\n        svgAttributes.progressColor === svgAttributes.circleColor\n      ) {\n        svgAttributes.progressColor = controls.progressColor.value;\n      }\n      setTextSize();\n      rerender = true;\n    } else if (e.target.name === \"size\") {\n      const radius = e.target.valueAsNumber / 2 - 10;\n      const circumference = 3.14 * radius * 2;\n      svgAttributes.circumference = circumference + \"px\";\n      svgAttributes.percentage =\n        Math.round(circumference * ((100 - svgAttributes.progress) / 100)) +\n        \"px\";\n    } else if (e.target.type === \"checkbox\") {\n      value = e.target.checked;\n      if (e.target.name === \"percentageToggle\") {\n        setTextSize();\n      }\n      rerender = true;\n    } else if (e.target.name === \"textSize\") {\n      const svgText = document.querySelector(\"text\");\n      const textRect = svgText.getBoundingClientRect();\n      value = {\n        width: Math.round(textRect.width),\n        height: Math.round(textRect.height),\n        fontSize: value,\n      };\n      rerender = true;\n    } else if (\n      e.target.name === \"backgroundOp\" &&\n      e.target.name === \"backgroundColor\"\n    ) {\n      rerender = true;\n    }\n    svgAttributes[e.target.name] = value;\n    setSvg(rerender);\n  }\n\n  function setSvg(rerender = false) {\n    const html = getSvg(svgAttributes);\n    output.innerHTML = html;\n    outputCode.innerText = html;\n    if (rerender) {\n      setTextSize();\n      setSvg(false);\n    }\n  }\n\n  function handleCopy(e) {\n    navigator.clipboard.writeText(outputCode.innerText);\n    const currentValue = e.target.innerText;\n    e.target.innerText = \"Copied!\";\n    setTimeout(function () {\n      e.target.innerText = currentValue;\n    }, 2000);\n  }\n\n  setSvg(false);\n\n  controls.addEventListener(\"input\", handleFormChange);\n  copyBtn.addEventListener(\"click\", handleCopy);\n\n  async function convertSVGsToPNGsAndZip(svgArray) {\n    const zip = new JSZip();\n\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = 800;\n    canvas.height = 800;\n    const ctx = canvas.getContext(\"2d\");\n\n    async function svgToPng(svgString, index) {\n      return new Promise((resolve) => {\n        const img = new Image();\n        img.onload = () => {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n          const scale = Math.min(\n            canvas.width / img.width,\n            canvas.height / img.height\n          );\n          const x = canvas.width / 2 - (img.width / 2) * scale;\n          const y = canvas.height / 2 - (img.height / 2) * scale;\n\n          ctx.drawImage(img, x, y, img.width * scale, img.height * scale);\n\n          canvas.toBlob((blob) => {\n            resolve({ blob, index });\n          }, \"image/png\");\n        };\n        img.src = \"data:image/svg+xml;base64,\" + btoa(svgString);\n      });\n    }\n\n    const pngPromises = svgArray.map((svg, index) => svgToPng(svg, index));\n    const pngResults = await Promise.all(pngPromises);\n\n    pngResults.forEach(({ blob, index }) => {\n      zip.file(`progres_${index}.png`, blob);\n    });\n\n    const zipBlob = await zip.generateAsync({ type: \"blob\" });\n\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.href = URL.createObjectURL(zipBlob);\n    downloadLink.download = \"svg_to_png_images.zip\";\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  }\n  function handleGetp() {\n    const sa = [];\n    for (let index = 0; index <= 100; index++) {\n      progressrange.value = index;\n      const inputEvent = new Event(\"input\", {\n        bubbles: true,\n        cancelable: true,\n      });\n      progressrange.dispatchEvent(inputEvent);\n      sa.push(output.innerHTML);\n    }\n    convertSVGsToPNGsAndZip(sa).then();\n  }\n  const getpBtn = document.getElementById(\"get-pngs\");\n  getpBtn.addEventListener(\"click\", handleGetp);\n})();\n"],"names":["controls","document","getElementById","output","outputCode","copyBtn","svgAttributes","circumference","percentage","progress","size","backgroundColor","backgroundOp","circleColor","progressColor","circleWidth","progressWidth","progressShape","textColor","textSize","width","height","fontSize","valueToggle","percentageToggle","setTextSize","textRect","svgText","querySelector","getBoundingClientRect","Math","round","setSvg","rerender","html","getSvg","attributes","text","addOpacityToHex","hexColor","opacity","test","Error","replace","alpha","max","min","toString","padStart","innerHTML","innerText","convertSVGsToPNGsAndZip","svgArray","zip","JSZip","canvas","createElement","ctx","getContext","svgToPng","svgString","index","Promise","resolve","img","Image","onload","clearRect","scale","x","y","drawImage","toBlob","blob","src","btoa","pngPromises","map","svg","pngResults","all","forEach","file","zipBlob","generateAsync","type","downloadLink","href","URL","createObjectURL","download","body","appendChild","click","removeChild","addEventListener","e","value","target","name","radius","valueAsNumber","checked","navigator","clipboard","writeText","currentValue","setTimeout","getpBtn","sa","progressrange","inputEvent","Event","bubbles","cancelable","dispatchEvent","push","then"],"version":3,"file":"index.ad63c8e3.js.map"}